{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","url","request","Request","fetch","then","response","json","users","catch","e","this","filteredRobot","filter","robot","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACI,6BAAKF,IACL,4BAAIC,WCeLK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,8BACKA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACI,cAAC,EAAD,CAEIR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCGdC,EAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKT,UAAU,MAAf,SACI,uBAAOA,UAAU,mCACjBU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCOPI,G,OAXA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAGR,aADA,CACA,OAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAO,SAApE,SACKN,EAAMO,aCuEJC,E,kDApEb,aAAe,IAAD,8BACZ,gBAqCFC,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAtC1C,EAAKC,MAAQ,CACXzB,OAAQ,GACRsB,YAAa,IAEfX,QAAQC,IAAI,eANA,E,qDAUd,WAAqB,IAAD,OAWZc,EAAG,UADQ,uCACR,8CACHC,EAAU,IAAIC,QAAQF,GAG5BG,MAAMF,GACHG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAErB,OAAQiC,OACtCC,OAAM,SAAAC,GAAC,OAAIxB,QAAQC,IAAIuB,MAG1BxB,QAAQC,IAAI,uB,oBAYd,WACED,QAAQC,IAAI,UAEZ,MAAgCwB,KAAKX,MAA7BzB,EAAR,EAAQA,OAAQsB,EAAhB,EAAgBA,YACVe,EAAgBrC,EAAOsC,QAAO,SAAAC,GAClC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASnB,EAAYkB,kBAGvD,OAAQxC,EAAO0C,OAGX,sBAAK9C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAc+B,KAAKjB,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUnB,OAAQqC,SANxB,6C,GArDYM,IAAMC,WCCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d837852b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    //without key, if some of those get deleted react won't know which one is which\n    //and it needs to change the entire dom instead of just one card\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })} \n        </div>\n    );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchChange} ) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n//by def all react comps have this children property\n//useful to create components that wrap other components\nconst Scroll = (props) => {\n    console.log(props)\n    return (\n        //first{} js expression, 2nd {} an js obj\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n    \n};\n\nexport default Scroll;","import { render } from '@testing-library/react';\nimport React from 'react';\nimport CardList from '../components/CardList'; //.. one folder back\n//import { robots } from './robots'; //not default, can export multiple, needs destructuring\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\n\n//The virtual dom is a js obj, that collects this state\n//and react uses this state to render and pass em down as props to pure functions\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n    console.log('constructor');\n  }\n\n  //this is part of react, no need to use arrow func\n  componentDidMount() { //make requests here\n\n    // fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response => {\n    //         return response.json();\n    // })\n    // .then(users => {\n    //     this.setState({ robots: users })\n    // })\n\n    const proxyUrl = \"https://cors-anywhere.herokuapp.com/\"\n    const url = `${proxyUrl}https://jsonplaceholder.typicode.com/users`;\n    const request = new Request(url);\n\n    //refactoring {} to oneliners //fetch is a method on the window obj\n    fetch(request)\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n      .catch(e => console.log(e));\n\n    // this.setState({ robots: robots}) //using old robots.js file\n    console.log('componentDidMount');\n  }\n\n  //in here \"this\" is not refering to app because \n  //the event happened in searchbox.js's input so this is refr to input\n  // onSearchChange(event) { ......... }\n  //TO FIX use arrow func\n  onSearchChange = (event) => {\n    //*To update state, never this.state.searchfield, use setState\n    this.setState({ searchfield: event.target.value })\n  }\n\n  render() {\n    console.log('render');\n\n    const { robots, searchfield } = this.state;\n    const filteredRobot = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    return !robots.length ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f2'>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobot} />\n          </Scroll>\n\n        </div>\n      )\n\n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; //. same folder\nimport reportWebVitals from './reportWebVitals';\n\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}