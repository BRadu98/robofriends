{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobot","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce57a2fa.chunk.js","sourcesContent":["import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    //without key, if some of those get deleted react won't know which one is which\n    //and it needs to change the entire dom instead of just one card\n    \n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={i} //key\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })} \n        </div>\n    );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ( {searchChange} ) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\n//by def all react comps have this children property\n//useful to create components that wrap other components\nconst Scroll = (props) => {\n    console.log(props)\n    return (\n        //first{} js expression, 2nd {} an js obj\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\n            {props.children}\n        </div>\n    )\n    \n};\n\nexport default Scroll;","import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\n\n//extra safety during production, won't see the h1 in dev mode\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  //if any err, react runs this lifecycle hook\n  componentDidCatch(error, info) {\n    ;\n    this.setState({ hasError: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>That is not good.Err</h1>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundry","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n//standard for any async action lije ajax\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useState, useEffect } from 'react';\nimport CardList from '../components/CardList'; //.. one folder back\n//import { robots } from './robots'; //not default, can export multiple, needs destructuring\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n//redux actions\nimport { requestRobots, setSearchField } from '../actions'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n  return { //coming from reducers\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n//dispatch is what triggers(sends) the action into the reducers\nconst mapDispatchToProps = (dispatch) => ({\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n}) //()used to return obj, instead of: const mStP=(state)=>{return{players:state}};\n\n\n//The virtual dom is a js obj, that collects this state\n//and react uses this state to render and pass em down as props to pure functions\nfunction App (props){\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     robots: [],\n  //     searchfield: ''\n  //   }\n  //   console.log('constructor');\n  // }\n\n  // const [count, setCount] = useState(0);\n  // const [robots, setRobots] = useState([]);\n  // const [searchfield, setSearchfield] = useState('');\n  \n  //using redux:\n  const {searchField, onSearchChange, onRequestRobots, robots, isPending} = props\n\n\n  //this is part of react {Component}, no need to use arrow func\n  // componentDidMount() { \n  //   fetch(\"https://jsonplaceholder.typicode.com/users\")\n  //     .then(response => response.json())\n  //     .then(users => this.setState({ robots: users }))\n  //     .catch(e => console.log(e));\n\n  //   // this.setState({ robots: robots}) //using old robots.js file\n  //   console.log('componentDidMount');\n  // }\n\n  useEffect(() => { //this gets run everytime the func App renders/re-renders\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //   .then(response => response.json())\n    //   .then(users => {setRobots(users)});\n    // console.log(count)\n    onRequestRobots()\n  }, [onRequestRobots]) //Only run if [count or onRequestRobots] change\n  //without this second param [], it renders in an infinite loop r-sc-rr\n  //SKIP applying the useEffect if certain values haven't changed btw re-renders\n  //leaving it empty is like componentDidMount\n\n  // const onSearchChange = (event) => {\n  //   //this.setState({ searchfield: event.target.value })\n  //   setSearchfield(event.target.value)\n  // }\n\n  // const { robots, searchfield } = this.state;\n  const filteredRobot = robots.filter(robot => { //without redux: searchfield\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\n  })\n\n  // return !robots.length ?\n  return isPending ?\n    <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f2'>RoboFriends</h1>\n        {/* <button onClick={()=>setCount(count+1)}>Click me!</button> */}\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobot} />\n          </ErrorBoundry>\n        </Scroll>\n\n      </div>\n    )\n\n}\n\n//connect is a higher order func, it returns another function\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n//connect runs, interested in (thisPartOfState,thoseActions)\n//then give those props to the app","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\n//higher order func, returns another func \n//AND trigger reduxThunk which gives the dispatch\nexport const requestRobots = () => (dispatch) => {\n  dispatch( {type: REQUEST_ROBOTS_PENDING} ); //this executes right away\n  //this finishes later\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(response => response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED} from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\n//reducer\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      //NEW STATE, everything currently in + sF action payload\n      return { ...state, searchField: action.payload };\n    default:\n      return state; \n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  //always return the state from default in a reducer\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default:  \n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'; //. same folder\nimport reportWebVitals from './reportWebVitals';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\n//to handle async in middleware\nimport thunkMiddleware from 'redux-thunk';\n\n\n//middleware, to be aplied on reduxApp\nconst logger = createLogger();\n\n//combine all reducers into a root reducer\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n\n//STORE using reducer to create that obj tree of the state\nconst store = createStore(rootReducer, \n  applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}